name: CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  ACCESS_KEY: ${{secrets.ACCESS_KEY}}
  SECRET_KEY: ${{secrets.SECRET_KEY}}
  BUCKET: ${{secrets.BUCKET}}
  REGION: ${{secrets.REGION}}
  s
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: JDK 21 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Gradle 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 빌드 권한 부여
        run: chmod +x ./gradlew
        shell: bash

      - name: 빌드 (테스트 제외)
        run: ./gradlew build -x test

      - name: 이미지 태그 생성
        id: image-tag
        run: |
          echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "Building image with tag: ${GITHUB_SHA::7}"

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 도커 허브 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: 도커 이미지 빌드 및 Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            7zrv/fanfal:${{ steps.image-tag.outputs.tag }}
            7zrv/fanfal:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production

    steps:
      - name: 배포 시작 알림
        run: |
          echo "Deploying version ${{ needs.build-and-push.outputs.image-tag }} to production"

      - name: SSH 연결을 통한 EC2 배포
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e
            echo "Starting deployment..."
            
            cd ~/fanfal
            
            export IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
            
            sudo -E ./deploy.sh
            
            echo "Deployment completed!"
